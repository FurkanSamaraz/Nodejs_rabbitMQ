{\rtf1\ansi\ansicpg1254\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red23\green23\blue23;\red202\green202\blue202;
\red70\green137\blue204;\red140\green211\blue254;\red212\green214\blue154;\red194\green126\blue101;\red183\green111\blue179;
\red67\green192\blue160;\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c33725\c61176\c83922;\cssrgb\c61176\c86275\c99608;\cssrgb\c86275\c86275\c66667;\cssrgb\c80784\c56863\c47059;\cssrgb\c77255\c52549\c75294;
\cssrgb\c30588\c78824\c69020;\cssrgb\c70980\c80784\c65882;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #!/usr/bin/env node\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 amqp\cf4 \strokec4  = \cf7 \strokec7 require\cf4 \strokec4 (\cf8 \strokec8 'amqplib/callback_api'\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 amqp\cf4 \strokec4 .\cf7 \strokec7 connect\cf4 \strokec4 (\cf8 \strokec8 'amqp://localhost'\cf4 \strokec4 , \cf5 \strokec5 function\cf4 \strokec4 (\cf6 \strokec6 error0\cf4 \strokec4 , \cf6 \strokec6 connection\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf9 \strokec9 if\cf4 \strokec4  (\cf6 \strokec6 error0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 throw\cf4 \strokec4  \cf6 \strokec6 error0\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf6 \strokec6 connection\cf4 \strokec4 .\cf7 \strokec7 createChannel\cf4 \strokec4 (\cf5 \strokec5 function\cf4 \strokec4 (\cf6 \strokec6 error1\cf4 \strokec4 , \cf6 \strokec6 channel\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 if\cf4 \strokec4  (\cf6 \strokec6 error1\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf9 \strokec9 throw\cf4 \strokec4  \cf6 \strokec6 error1\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 queue\cf4 \strokec4  = \cf8 \strokec8 'hello'\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 msg\cf4 \strokec4  = \cf8 \strokec8 'Hello World!'\cf4 \strokec4 ;\cb1 \
\
\cb3         \cf6 \strokec6 channel\cf4 \strokec4 .\cf7 \strokec7 assertQueue\cf4 \strokec4 (\cf6 \strokec6 queue\cf4 \strokec4 , \{\cb1 \
\cb3             \cf6 \strokec6 durable:\cf4 \strokec4  \cf5 \strokec5 false\cf4 \cb1 \strokec4 \
\cb3         \});\cb1 \
\cb3         \cf6 \strokec6 channel\cf4 \strokec4 .\cf7 \strokec7 sendToQueue\cf4 \strokec4 (\cf6 \strokec6 queue\cf4 \strokec4 , \cf10 \strokec10 Buffer\cf4 \strokec4 .\cf7 \strokec7 from\cf4 \strokec4 (\cf6 \strokec6 msg\cf4 \strokec4 ));\cb1 \
\
\cb3         \cf6 \strokec6 console\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf8 \strokec8 " [x] Sent %s"\cf4 \strokec4 , \cf6 \strokec6 msg\cf4 \strokec4 );\cb1 \
\cb3     \});\cb1 \
\cb3     \cf7 \strokec7 setTimeout\cf4 \strokec4 (\cf5 \strokec5 function\cf4 \strokec4 () \{\cb1 \
\cb3         \cf6 \strokec6 connection\cf4 \strokec4 .\cf7 \strokec7 close\cf4 \strokec4 ();\cb1 \
\cb3         \cf6 \strokec6 process\cf4 \strokec4 .\cf7 \strokec7 exit\cf4 \strokec4 (\cf11 \strokec11 0\cf4 \strokec4 );\cb1 \
\cb3     \}, \cf11 \strokec11 500\cf4 \strokec4 );\cb1 \
\cb3 \});\cb1 \
}